{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Commands = void 0;\nvar tslib_1 = require(\"tslib\");\nvar cloneDeepWith_1 = (0, tslib_1.__importDefault)(require(\"lodash/cloneDeepWith\"));\nvar cloneDeep_1 = (0, tslib_1.__importDefault)(require(\"lodash/cloneDeep\"));\nvar map_1 = (0, tslib_1.__importDefault)(require(\"lodash/map\"));\nvar CommandName_1 = require(\"../interfaces/CommandName\");\nvar Commands = function () {\n  function Commands(store, nativeCommandsSender, layoutTreeParser, layoutTreeCrawler, commandsObserver, uniqueIdProvider, optionsProcessor, layoutProcessor, optionsCrawler) {\n    _classCallCheck(this, Commands);\n    this.store = store;\n    this.nativeCommandsSender = nativeCommandsSender;\n    this.layoutTreeParser = layoutTreeParser;\n    this.layoutTreeCrawler = layoutTreeCrawler;\n    this.commandsObserver = commandsObserver;\n    this.uniqueIdProvider = uniqueIdProvider;\n    this.optionsProcessor = optionsProcessor;\n    this.layoutProcessor = layoutProcessor;\n    this.optionsCrawler = optionsCrawler;\n  }\n  _createClass(Commands, [{\n    key: \"setRoot\",\n    value: function setRoot(simpleApi) {\n      var _this = this;\n      var input = cloneLayout(simpleApi);\n      this.optionsCrawler.crawl(input.root);\n      var processedRoot = this.layoutProcessor.process(input.root, CommandName_1.CommandName.SetRoot);\n      var root = this.layoutTreeParser.parse(processedRoot);\n      var modals = (0, map_1.default)(input.modals, function (modal) {\n        _this.optionsCrawler.crawl(modal);\n        var processedModal = _this.layoutProcessor.process(modal, CommandName_1.CommandName.SetRoot);\n        return _this.layoutTreeParser.parse(processedModal);\n      });\n      var overlays = (0, map_1.default)(input.overlays, function (overlay) {\n        _this.optionsCrawler.crawl(overlay);\n        var processedOverlay = _this.layoutProcessor.process(overlay, CommandName_1.CommandName.SetRoot);\n        return _this.layoutTreeParser.parse(processedOverlay);\n      });\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetRoot);\n      this.commandsObserver.notify(CommandName_1.CommandName.SetRoot, {\n        commandId: commandId,\n        layout: {\n          root: root,\n          modals: modals,\n          overlays: overlays\n        }\n      });\n      this.layoutTreeCrawler.crawl(root, CommandName_1.CommandName.SetRoot);\n      modals.forEach(function (modalLayout) {\n        _this.layoutTreeCrawler.crawl(modalLayout, CommandName_1.CommandName.SetRoot);\n      });\n      overlays.forEach(function (overlayLayout) {\n        _this.layoutTreeCrawler.crawl(overlayLayout, CommandName_1.CommandName.SetRoot);\n      });\n      var result = this.nativeCommandsSender.setRoot(commandId, {\n        root: root,\n        modals: modals,\n        overlays: overlays\n      });\n      return result;\n    }\n  }, {\n    key: \"setDefaultOptions\",\n    value: function setDefaultOptions(options) {\n      var input = (0, cloneDeep_1.default)(options);\n      this.optionsProcessor.processDefaultOptions(input, CommandName_1.CommandName.SetDefaultOptions);\n      this.nativeCommandsSender.setDefaultOptions(input);\n      this.commandsObserver.notify(CommandName_1.CommandName.SetDefaultOptions, {\n        options: options\n      });\n    }\n  }, {\n    key: \"mergeOptions\",\n    value: function mergeOptions(componentId, options) {\n      var input = (0, cloneDeep_1.default)(options);\n      var component = this.store.getComponentInstance(componentId);\n      var componentProps = this.store.getPropsForId(componentId) || undefined;\n      this.optionsProcessor.processOptions(CommandName_1.CommandName.MergeOptions, input, componentProps);\n      if (component && !component.isMounted) console.warn(`Navigation.mergeOptions was invoked on component with id: ${componentId} before it is mounted, this can cause UI issues and should be avoided.\\n Use static options instead.`);\n      this.nativeCommandsSender.mergeOptions(componentId, input);\n      this.commandsObserver.notify(CommandName_1.CommandName.MergeOptions, {\n        componentId: componentId,\n        options: options\n      });\n    }\n  }, {\n    key: \"updateProps\",\n    value: function updateProps(componentId, props, callback) {\n      this.store.updateProps(componentId, props, callback);\n      this.commandsObserver.notify(CommandName_1.CommandName.UpdateProps, {\n        componentId: componentId,\n        props: props\n      });\n    }\n  }, {\n    key: \"showModal\",\n    value: function showModal(layout) {\n      var layoutCloned = cloneLayout(layout);\n      this.optionsCrawler.crawl(layoutCloned);\n      var layoutProcessed = this.layoutProcessor.process(layoutCloned, CommandName_1.CommandName.ShowModal);\n      var layoutNode = this.layoutTreeParser.parse(layoutProcessed);\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowModal);\n      this.commandsObserver.notify(CommandName_1.CommandName.ShowModal, {\n        commandId: commandId,\n        layout: layoutNode\n      });\n      this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.ShowModal);\n      var result = this.nativeCommandsSender.showModal(commandId, layoutNode);\n      return result;\n    }\n  }, {\n    key: \"dismissModal\",\n    value: function dismissModal(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissModal);\n      this.optionsProcessor.processOptions(CommandName_1.CommandName.DismissModal, mergeOptions);\n      var result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissModal, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"dismissAllModals\",\n    value: function dismissAllModals(mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllModals);\n      this.optionsProcessor.processOptions(CommandName_1.CommandName.DismissAllModals, mergeOptions);\n      var result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissAllModals, {\n        commandId: commandId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"push\",\n    value: function push(componentId, simpleApi) {\n      var input = cloneLayout(simpleApi);\n      this.optionsCrawler.crawl(input);\n      var layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.Push);\n      var layout = this.layoutTreeParser.parse(layoutProcessed);\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Push);\n      this.commandsObserver.notify(CommandName_1.CommandName.Push, {\n        commandId: commandId,\n        componentId: componentId,\n        layout: layout\n      });\n      this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.Push);\n      var result = this.nativeCommandsSender.push(commandId, componentId, layout);\n      return result;\n    }\n  }, {\n    key: \"pop\",\n    value: function pop(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Pop);\n      this.optionsProcessor.processOptions(CommandName_1.CommandName.Pop, mergeOptions);\n      var result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.Pop, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"popTo\",\n    value: function popTo(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopTo);\n      this.optionsProcessor.processOptions(CommandName_1.CommandName.PopTo, mergeOptions);\n      var result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.PopTo, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"popToRoot\",\n    value: function popToRoot(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopToRoot);\n      this.optionsProcessor.processOptions(CommandName_1.CommandName.PopToRoot, mergeOptions);\n      var result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.PopToRoot, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"setStackRoot\",\n    value: function setStackRoot(componentId, children) {\n      var _this2 = this;\n      var input = (0, map_1.default)(cloneLayout(children), function (simpleApi) {\n        _this2.optionsCrawler.crawl(simpleApi);\n        var layoutProcessed = _this2.layoutProcessor.process(simpleApi, CommandName_1.CommandName.SetStackRoot);\n        var layout = _this2.layoutTreeParser.parse(layoutProcessed);\n        return layout;\n      });\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetStackRoot);\n      this.commandsObserver.notify(CommandName_1.CommandName.SetStackRoot, {\n        commandId: commandId,\n        componentId: componentId,\n        layout: input\n      });\n      input.forEach(function (layoutNode) {\n        _this2.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.SetStackRoot);\n      });\n      var result = this.nativeCommandsSender.setStackRoot(commandId, componentId, input);\n      return result;\n    }\n  }, {\n    key: \"showOverlay\",\n    value: function showOverlay(simpleApi) {\n      var input = cloneLayout(simpleApi);\n      this.optionsCrawler.crawl(input);\n      var layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.ShowOverlay);\n      var layout = this.layoutTreeParser.parse(layoutProcessed);\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowOverlay);\n      this.commandsObserver.notify(CommandName_1.CommandName.ShowOverlay, {\n        commandId: commandId,\n        layout: layout\n      });\n      this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.ShowOverlay);\n      var result = this.nativeCommandsSender.showOverlay(commandId, layout);\n      return result;\n    }\n  }, {\n    key: \"dismissOverlay\",\n    value: function dismissOverlay(componentId) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissOverlay);\n      var result = this.nativeCommandsSender.dismissOverlay(commandId, componentId);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissOverlay, {\n        commandId: commandId,\n        componentId: componentId\n      });\n      return result;\n    }\n  }, {\n    key: \"dismissAllOverlays\",\n    value: function dismissAllOverlays() {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllOverlays);\n      var result = this.nativeCommandsSender.dismissAllOverlays(commandId);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissAllOverlays, {\n        commandId: commandId\n      });\n      return result;\n    }\n  }, {\n    key: \"getLaunchArgs\",\n    value: function getLaunchArgs() {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.GetLaunchArgs);\n      var result = this.nativeCommandsSender.getLaunchArgs(commandId);\n      this.commandsObserver.notify(CommandName_1.CommandName.GetLaunchArgs, {\n        commandId: commandId\n      });\n      return result;\n    }\n  }]);\n  return Commands;\n}();\nexports.Commands = Commands;\nfunction cloneLayout(layout) {\n  return (0, cloneDeepWith_1.default)(layout, function (value, key) {\n    if (key === 'passProps' && typeof value === 'object' && value !== null) return _objectSpread({}, value);\n  });\n}","map":{"version":3,"names":["_defineProperty","require","_classCallCheck","_createClass","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","Commands","tslib_1","cloneDeepWith_1","__importDefault","cloneDeep_1","map_1","CommandName_1","store","nativeCommandsSender","layoutTreeParser","layoutTreeCrawler","commandsObserver","uniqueIdProvider","optionsProcessor","layoutProcessor","optionsCrawler","key","setRoot","simpleApi","_this","input","cloneLayout","crawl","root","processedRoot","process","CommandName","SetRoot","parse","modals","default","modal","processedModal","overlays","overlay","processedOverlay","commandId","generate","notify","layout","modalLayout","overlayLayout","result","setDefaultOptions","options","processDefaultOptions","SetDefaultOptions","mergeOptions","componentId","component","getComponentInstance","componentProps","getPropsForId","undefined","processOptions","MergeOptions","isMounted","console","warn","updateProps","props","callback","UpdateProps","showModal","layoutCloned","layoutProcessed","ShowModal","layoutNode","dismissModal","DismissModal","dismissAllModals","DismissAllModals","Push","pop","Pop","popTo","PopTo","popToRoot","PopToRoot","setStackRoot","children","_this2","SetStackRoot","showOverlay","ShowOverlay","dismissOverlay","DismissOverlay","dismissAllOverlays","DismissAllOverlays","getLaunchArgs","GetLaunchArgs"],"sources":["D:/companies/vishnu/micApp/rev0.0/micAppTestFullStack/node_modules/react-native-navigation/lib/dist/src/commands/Commands.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Commands = void 0;\nconst tslib_1 = require(\"tslib\");\nconst cloneDeepWith_1 = (0, tslib_1.__importDefault)(require(\"lodash/cloneDeepWith\"));\nconst cloneDeep_1 = (0, tslib_1.__importDefault)(require(\"lodash/cloneDeep\"));\nconst map_1 = (0, tslib_1.__importDefault)(require(\"lodash/map\"));\nconst CommandName_1 = require(\"../interfaces/CommandName\");\nclass Commands {\n    store;\n    nativeCommandsSender;\n    layoutTreeParser;\n    layoutTreeCrawler;\n    commandsObserver;\n    uniqueIdProvider;\n    optionsProcessor;\n    layoutProcessor;\n    optionsCrawler;\n    constructor(store, nativeCommandsSender, layoutTreeParser, layoutTreeCrawler, commandsObserver, uniqueIdProvider, optionsProcessor, layoutProcessor, optionsCrawler) {\n        this.store = store;\n        this.nativeCommandsSender = nativeCommandsSender;\n        this.layoutTreeParser = layoutTreeParser;\n        this.layoutTreeCrawler = layoutTreeCrawler;\n        this.commandsObserver = commandsObserver;\n        this.uniqueIdProvider = uniqueIdProvider;\n        this.optionsProcessor = optionsProcessor;\n        this.layoutProcessor = layoutProcessor;\n        this.optionsCrawler = optionsCrawler;\n    }\n    setRoot(simpleApi) {\n        const input = cloneLayout(simpleApi);\n        this.optionsCrawler.crawl(input.root);\n        const processedRoot = this.layoutProcessor.process(input.root, CommandName_1.CommandName.SetRoot);\n        const root = this.layoutTreeParser.parse(processedRoot);\n        const modals = (0, map_1.default)(input.modals, (modal) => {\n            this.optionsCrawler.crawl(modal);\n            const processedModal = this.layoutProcessor.process(modal, CommandName_1.CommandName.SetRoot);\n            return this.layoutTreeParser.parse(processedModal);\n        });\n        const overlays = (0, map_1.default)(input.overlays, (overlay) => {\n            this.optionsCrawler.crawl(overlay);\n            const processedOverlay = this.layoutProcessor.process(overlay, CommandName_1.CommandName.SetRoot);\n            return this.layoutTreeParser.parse(processedOverlay);\n        });\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetRoot);\n        this.commandsObserver.notify(CommandName_1.CommandName.SetRoot, {\n            commandId,\n            layout: { root, modals, overlays },\n        });\n        this.layoutTreeCrawler.crawl(root, CommandName_1.CommandName.SetRoot);\n        modals.forEach((modalLayout) => {\n            this.layoutTreeCrawler.crawl(modalLayout, CommandName_1.CommandName.SetRoot);\n        });\n        overlays.forEach((overlayLayout) => {\n            this.layoutTreeCrawler.crawl(overlayLayout, CommandName_1.CommandName.SetRoot);\n        });\n        const result = this.nativeCommandsSender.setRoot(commandId, { root, modals, overlays });\n        return result;\n    }\n    setDefaultOptions(options) {\n        const input = (0, cloneDeep_1.default)(options);\n        this.optionsProcessor.processDefaultOptions(input, CommandName_1.CommandName.SetDefaultOptions);\n        this.nativeCommandsSender.setDefaultOptions(input);\n        this.commandsObserver.notify(CommandName_1.CommandName.SetDefaultOptions, { options });\n    }\n    mergeOptions(componentId, options) {\n        const input = (0, cloneDeep_1.default)(options);\n        const component = this.store.getComponentInstance(componentId);\n        const componentProps = this.store.getPropsForId(componentId) || undefined;\n        this.optionsProcessor.processOptions(CommandName_1.CommandName.MergeOptions, input, componentProps);\n        if (component && !component.isMounted)\n            console.warn(`Navigation.mergeOptions was invoked on component with id: ${componentId} before it is mounted, this can cause UI issues and should be avoided.\\n Use static options instead.`);\n        this.nativeCommandsSender.mergeOptions(componentId, input);\n        this.commandsObserver.notify(CommandName_1.CommandName.MergeOptions, { componentId, options });\n    }\n    updateProps(componentId, props, callback) {\n        this.store.updateProps(componentId, props, callback);\n        this.commandsObserver.notify(CommandName_1.CommandName.UpdateProps, { componentId, props });\n    }\n    showModal(layout) {\n        const layoutCloned = cloneLayout(layout);\n        this.optionsCrawler.crawl(layoutCloned);\n        const layoutProcessed = this.layoutProcessor.process(layoutCloned, CommandName_1.CommandName.ShowModal);\n        const layoutNode = this.layoutTreeParser.parse(layoutProcessed);\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowModal);\n        this.commandsObserver.notify(CommandName_1.CommandName.ShowModal, { commandId, layout: layoutNode });\n        this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.ShowModal);\n        const result = this.nativeCommandsSender.showModal(commandId, layoutNode);\n        return result;\n    }\n    dismissModal(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissModal);\n        this.optionsProcessor.processOptions(CommandName_1.CommandName.DismissModal, mergeOptions);\n        const result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissModal, {\n            commandId,\n            componentId,\n            mergeOptions,\n        });\n        return result;\n    }\n    dismissAllModals(mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllModals);\n        this.optionsProcessor.processOptions(CommandName_1.CommandName.DismissAllModals, mergeOptions);\n        const result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissAllModals, { commandId, mergeOptions });\n        return result;\n    }\n    push(componentId, simpleApi) {\n        const input = cloneLayout(simpleApi);\n        this.optionsCrawler.crawl(input);\n        const layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.Push);\n        const layout = this.layoutTreeParser.parse(layoutProcessed);\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Push);\n        this.commandsObserver.notify(CommandName_1.CommandName.Push, { commandId, componentId, layout });\n        this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.Push);\n        const result = this.nativeCommandsSender.push(commandId, componentId, layout);\n        return result;\n    }\n    pop(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Pop);\n        this.optionsProcessor.processOptions(CommandName_1.CommandName.Pop, mergeOptions);\n        const result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.Pop, { commandId, componentId, mergeOptions });\n        return result;\n    }\n    popTo(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopTo);\n        this.optionsProcessor.processOptions(CommandName_1.CommandName.PopTo, mergeOptions);\n        const result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.PopTo, { commandId, componentId, mergeOptions });\n        return result;\n    }\n    popToRoot(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopToRoot);\n        this.optionsProcessor.processOptions(CommandName_1.CommandName.PopToRoot, mergeOptions);\n        const result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.PopToRoot, { commandId, componentId, mergeOptions });\n        return result;\n    }\n    setStackRoot(componentId, children) {\n        const input = (0, map_1.default)(cloneLayout(children), (simpleApi) => {\n            this.optionsCrawler.crawl(simpleApi);\n            const layoutProcessed = this.layoutProcessor.process(simpleApi, CommandName_1.CommandName.SetStackRoot);\n            const layout = this.layoutTreeParser.parse(layoutProcessed);\n            return layout;\n        });\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetStackRoot);\n        this.commandsObserver.notify(CommandName_1.CommandName.SetStackRoot, {\n            commandId,\n            componentId,\n            layout: input,\n        });\n        input.forEach((layoutNode) => {\n            this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.SetStackRoot);\n        });\n        const result = this.nativeCommandsSender.setStackRoot(commandId, componentId, input);\n        return result;\n    }\n    showOverlay(simpleApi) {\n        const input = cloneLayout(simpleApi);\n        this.optionsCrawler.crawl(input);\n        const layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.ShowOverlay);\n        const layout = this.layoutTreeParser.parse(layoutProcessed);\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowOverlay);\n        this.commandsObserver.notify(CommandName_1.CommandName.ShowOverlay, { commandId, layout });\n        this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.ShowOverlay);\n        const result = this.nativeCommandsSender.showOverlay(commandId, layout);\n        return result;\n    }\n    dismissOverlay(componentId) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissOverlay);\n        const result = this.nativeCommandsSender.dismissOverlay(commandId, componentId);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissOverlay, { commandId, componentId });\n        return result;\n    }\n    dismissAllOverlays() {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllOverlays);\n        const result = this.nativeCommandsSender.dismissAllOverlays(commandId);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissAllOverlays, { commandId });\n        return result;\n    }\n    getLaunchArgs() {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.GetLaunchArgs);\n        const result = this.nativeCommandsSender.getLaunchArgs(commandId);\n        this.commandsObserver.notify(CommandName_1.CommandName.GetLaunchArgs, { commandId });\n        return result;\n    }\n}\nexports.Commands = Commands;\nfunction cloneLayout(layout) {\n    return (0, cloneDeepWith_1.default)(layout, (value, key) => {\n        if (key === 'passProps' && typeof value === 'object' && value !== null)\n            return { ...value };\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}